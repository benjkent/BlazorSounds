@inject IJSRuntime JsRuntime


<div id="carouselExampleIndicators"
     class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
        <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
        <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
    </ol>
    <div class="carousel-inner">
        <div class="carousel-item  active">
            <img class="d-block w-100" src="@SlideImgages[0]" alt="Song1">
            <div class="carousel-caption">
                <small>@SlideCaptions[0]</small>
            </div>
        </div>
        <div class="carousel-item">
            <img class="d-block w-100" src="@SlideImgages[1]" alt="Song2">
            <div class="carousel-caption">
                <small>@SlideCaptions[1]</small>
            </div>
        </div>
        <div class="carousel-item">
            <img class="d-block w-100" src="@SlideImgages[2]" alt="Song3">
            <div class="carousel-caption">
                <small>@SlideCaptions[2]</small>
            </div>
        </div>
    </div>
    <a id="carouselExampleIndicators-prev"
       class="carousel-control-prev" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a id="carouselExampleIndicators-next"
       class="carousel-control-next" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
@code {
    [Parameter]
    public string[] SlideCaptions { get; set; }
    [Parameter]
    public string[] SlideImgages { get; set; }

    bool firstRender = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initializeCarousel");
            firstRender = false;
        }
    }

}
