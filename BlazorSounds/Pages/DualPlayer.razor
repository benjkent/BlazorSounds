@page "/dualplayer"
@inject HttpClient Http
@inject IJSRuntime js
<h1>Playlist</h1>

<p>Playing a specific song from a list of available songs</p>

@if (songlist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a>@SongTitle</a>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var song in songlist)
            {
                
                var buttonId = $"button{Array.IndexOf(songlist, song)}";
                var iconId = $"pPbuttonIcon{Array.IndexOf(songlist, song)}";
                <tr>
                    <td>@song.Title</td>
                    <td>@song.Category</td>
                    <td>
                        
                        <button type="button" class="btn btn-light" id="@buttonId" @onclick="(e => PlaySound(song, iconId))">
                            <span id="@iconId" class="@mediaState" title="media-play" aria-hidden="true"></span>
                        </button>

                        <audio id="@song.Title" src="@String.Format(song.Url)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}

@code {

    private string SongTitle = "";

    private SongListData[] songlist;

    private bool isPlaying = false;
    private SongListData songPlaying;

    private string mediaState = "oi oi-media-play";

    protected override async Task OnInitializedAsync()
    {
        songlist = await Http.GetFromJsonAsync<SongListData[]>("sample-data/sounds-data.json");
    }

    public class SongListData
    {
        public DateTime Date { get; set; }
        //public TimeSpan Duration { get; set; }
        public float Duration { get; set; }
        public string Title { get; set; }
        public string Category { get; set; }
        public string Url { get; set; }

    }

    public async Task PlaySound(SongListData name, string iconId)
    {
        if (isPlaying == false) // first time through it will be false
        {
            isPlaying = true;
            songPlaying = name;

            await MediaIconControl(iconId);

            await js.InvokeAsync<string>("PlayAudio", name.Title);

            DisplaySongPlaying(name.Title);
        }
        else
        {

            await PauseSound(songPlaying); // if it were on pause it.
        }

        StateHasChanged();

    }

    public async Task PauseSound(SongListData name)
    {
        isPlaying = false;

        await js.InvokeAsync<string>("PauseAudio", name.Title);
    }

    public void DisplaySongPlaying(string songname)
    {
        SongTitle = songname;
    }
    public async Task MediaIconControl(string elementId)
    {
        await js.InvokeAsync<string>("UpdatePlayPauseButtonIcon", elementId);
    }

}
